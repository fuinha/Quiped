{"version":3,"sources":["assets/loader.gif","App.js","assets/config.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","_useState","useState","_useState2","Object","slicedToArray","data","setData","_useState3","_useState4","display","setDisplay","useEffect","readUserData","database","ref","on","snapshot","val","react_default","a","createElement","className","style","src","loader","alt","undefined","map","item","key","id","name","borderColor","status","data-toggle","data-target","onClick","arr","items","set","sendData","window","location","reload","Boolean","hostname","match","console","disableYellowBox","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uPCMnCC,IAASC,KAAKC,QACjBF,IAASG,cCPY,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,cACnBC,MAAO,6CDGT,IAsEeC,EAtEH,WAAM,IAAAC,EACQC,mBAAS,IADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACHI,EADGJ,EAAA,GAAAK,EAEYN,oBAAS,GAFrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETE,EAFSD,EAAA,GAEDE,EAFCF,EAAA,GAGhBG,oBAAU,WACRC,KACC,IAEH,IAgBMA,EAAe,WACnBF,GAAW,GACXtB,IACGyB,WACAC,IAAI,UACJC,GAAG,QAAS,SAAUC,GACrBV,EAAQU,EAASC,MAAMZ,MACvBK,GAAW,MAGjB,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACZZ,EAAUS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gEAAgEC,MAAO,CAAEb,QAASA,EAAU,OAAS,SAC7HS,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAQC,IAAI,WACtBP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,wBAEFH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAd,0BAEUK,IAATrB,EACDA,EAAKsB,IAAI,SAAAC,GAAI,OACXV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCAAuCQ,IAAKD,EAAKE,IAC9DZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaO,EAAKG,MAC/Bb,EAAAC,EAAAC,cAAA,OACEE,MAAO,CAAEU,YAAaJ,EAAKK,OAAS,UAAY,WAChDZ,UAAU,MAAMa,cAAY,QAAQC,cAAY,WAChDC,QAAS,kBA1CF,SAAAN,GACfpB,GAAW,GACX,IAAM2B,EAAMhC,EAAKsB,IAAI,SAAAW,GAInB,OAHIA,EAAMR,KAAOA,IACfQ,EAAML,QAAUK,EAAML,QAEjBK,IAEThC,EAAQ+B,GACRjD,IACGyB,WACAC,IAAI,UACJyB,IAAI,CACHlC,SA6BmBmC,CAASZ,EAAKE,UAG/BZ,EAAAC,EAAAC,cAAA,wDAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,UAAQgB,QAAS,kBAAMK,OAAOC,SAASC,WACvCzB,EAAAC,EAAAC,cAAA,8BAMFF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mEAChBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,6CACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,iCE9DYuB,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCbNC,QAAQC,kBAAmB,EAC3BC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f5949f6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.584b607f.gif\";","/* eslint-disable react-native/no-inline-styles */\nimport React, { useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport './design/App.css';\nimport { config } from './assets/config';\nimport loader from \"../src/assets/loader.gif\";\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [display,setDisplay]= useState(false);\n  useEffect(() => {\n    readUserData();\n  }, []);\n\n  const sendData = id => {\n    setDisplay(true);\n    const arr = data.map(items => {\n      if (items.id === id) {\n        items.status = !items.status;\n      }\n      return items;\n    });\n    setData(arr);\n    firebase\n      .database()\n      .ref('Rooms/')\n      .set({\n        data,\n      })\n  };\n  const readUserData = () => {\n    setDisplay(true);\n    firebase\n      .database()\n      .ref('Rooms/')\n      .on('value', function (snapshot) {\n        setData(snapshot.val().data);\n        setDisplay(false);\n      });\n  };\n  return (\n    <div className=\"container position-relative vh-100\">\n      {display ? <div className=\"loading justify-content-center align-items-center flex-column\" style={{ display: display ? 'flex' : 'none' }}>\n        <img src={loader} alt=\"loader\" />\n        <p className=\"text-info\">Updating status ...</p>\n      </div> :\n      <div>\n      <h5 className=\"title text-info text-center my-3\"> Occupancy Status</h5>\n      {/* Mapping of data element */}\n      {data !== undefined ?\n      data.map(item =>\n        <div className=\"d-flex  justify-content-between list\" key={item.id}>\n          <p className=\"text-info\">{item.name}</p>\n          <div\n            style={{ borderColor: item.status ? '#82E871' : '#e3e3e3' }}\n            className=\"box\" data-toggle=\"modal\" data-target=\"#myModal\"\n            onClick={() => sendData(item.id)}>\n          </div>\n        </div>\n      ) : <p>Please ask your administrator to add rooms.</p>}\n      {/* End of Mapping */}\n      <div className=\"btn my-3 d-flex\">\n        <button onClick={() => window.location.reload()}>\n        <p>Refresh status</p>\n        </button>\n      </div>\n      </div>\n      }\n\n      <footer className=\"position-fixed bg-info w-100 d-flex justify-content-between p-3\">\n        <p className=\"text-white small\">&copy; Copyright 2020, All rights reserved.</p>\n        <p className=\"text-white small\">Made with &hearts; by Sudhir</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","export const  config = {\n  apiKey: \"AIzaSyBTDdfKRjLHO0zyKnuGuot5_ZBQXzpjL3U\",\n  authDomain: \"rnfirebase-9458f.firebaseapp.com\",\n  databaseURL: \"https://rnfirebase-9458f.firebaseio.com\",\n  projectId: \"rnfirebase-9458f\",\n  storageBucket: \"rnfirebase-9458f.appspot.com\",\n  messagingSenderId: \"77224361806\",\n  appId: \"1:77224361806:web:d339123a05dccd9e97e81f\"\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './design/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconsole.disableYellowBox = true;\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}